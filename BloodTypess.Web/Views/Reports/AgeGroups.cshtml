@model List<BloodTypess.Core.DTOs.ReportDtos.AgeGroupDto>
@{
    ViewData["Title"] = "Donor Age Groups";
}

<div class="container">
    <h1 class="mb-4">Donor Age Demographics</h1>

    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    Age Distribution
                </div>
                <div class="card-body">
                    <div style="height: 400px;">
                        <canvas id="ageGroupChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    Age Group Details
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Age Group</th>
                                    <th>Number of Donors</th>
                                    <th>Percentage</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int totalDonors = Model.Sum(a => a.Count);
                                }
                                @foreach (var ageGroup in Model.OrderBy(a => a.AgeGroup))
                                {
                                    decimal percentage = totalDonors > 0 ? (decimal)ageGroup.Count / totalDonors * 100 : 0;
                                    <tr>
                                        <td><span class="fw-bold">@ageGroup.AgeGroup</span></td>
                                        <td>@ageGroup.Count</td>
                                        <td>@percentage.ToString("0.##")%</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr class="table-active">
                                    <td><strong>Total</strong></td>
                                    <td><strong>@totalDonors</strong></td>
                                    <td><strong>100%</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    Age Demographics Insights
                </div>
                <div class="card-body">
                    @{
                        var largestGroup = Model.OrderByDescending(a => a.Count).FirstOrDefault();
                        var smallestGroup = Model.OrderBy(a => a.Count).FirstOrDefault();
                    }

                    @if (largestGroup != null && smallestGroup != null)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="alert alert-info">
                                    <h5>Largest Age Group</h5>
                                    <p class="mb-0">
                                        <strong>@largestGroup.AgeGroup</strong> with <strong>@largestGroup.Count</strong> donors
                                     </p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="alert alert-warning">
                                    <h5>Smallest Age Group</h5>
                                    <p class="mb-0">
                                        <strong>@smallestGroup.AgeGroup</strong> with <strong>@smallestGroup.Count</strong> donors
                                     </p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Colors for charts
        const colors = [
            '#dc3545', '#fd7e14', '#ffc107', '#20c997',
            '#0dcaf0', '#0d6efd', '#6610f2', '#6f42c1'
        ];

        // Age Groups Chart
        const ageGroupData = {
            labels: [@Html.Raw(string.Join(",", Model.Select(a => $"'{a.AgeGroup}'")))],
            datasets: [{
                label: 'Number of Donors',
                data: [@string.Join(",", Model.Select(a => a.Count))],
                backgroundColor: colors,
                borderWidth: 1
            }]
        };

        const ageGroupChart = new Chart(
            document.getElementById('ageGroupChart'),
            {
                type: 'bar',
                data: ageGroupData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: 'y',
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: 'Donors by Age Group'
                        }
                    }
                }
            }
        );
    </script>
}